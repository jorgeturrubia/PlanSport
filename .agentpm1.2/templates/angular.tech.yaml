# Angular Technical Specification for LLM Code Generation
# Version: 1.0
# Purpose: LLM-only consumption for precise code generation

project:
  name: [PROJECT_NAME]
  type: [PROJECT_TYPE]
  created: [YYYY-MM-DD]
  
stack:
  angular:
    version: [20.x.x]
    standalone: [true/false]
    ssr: [true/false]
    routing: [true/false]
  typescript: [5.x.x]
  node: [20.x.x]
  package_manager: [npm/pnpm/yarn]
  
dependencies:
  production:
    # Format: package: version
    [PACKAGE_NAME]: [VERSION]
    [PACKAGE_NAME]: [VERSION]
  development:
    [PACKAGE_NAME]: [VERSION]
    
architecture:
  pattern: [standalone/module-based]
  state_management: [signals/rxjs/ngrx/akita]
  change_detection: [OnPush/Default]
  
  structure:
    src/app:
      core:
        - services      # [auth, api, guards]
        - interceptors  # [auth, error]
        - models        # [interfaces, types]
      features:
        pattern: [feature-folder-pattern]
        example: [feature-name/components|services|models]
      shared:
        - components    # [reusable]
        - directives    # [custom]
        - pipes         # [transforms]
        - utils         # [helpers]
      layout:
        - header
        - footer
        - sidebar
        
auth:
  provider: [supabase/auth0/firebase/custom]
  version: [VERSION]
  config:
    login_redirect: [/dashboard]
    logout_redirect: [/login]
    protected_routes:
      - [/admin/*]
      - [/dashboard/*]
    public_routes:
      - [/login]
      - [/register]
      - [/public/*]
  roles:
    - [admin]
    - [user]
    - [guest]
  storage: [localStorage/sessionStorage/cookie]
  token_type: [JWT/session]
  
database:
  provider: [supabase/firebase/custom]
  type: [postgres/mysql/mongodb]
  orm: [prisma/typeorm/native]
  tables:
    [TABLE_NAME]:
      fields:
        [FIELD_NAME]: [TYPE]
        [FIELD_NAME]: [TYPE]
      relations:
        [RELATION_NAME]: [TYPE]
        
api:
  base_url: [https://api.example.com]
  version: [v1]
  auth_header: [Authorization]
  auth_prefix: [Bearer]
  
  endpoints:
    [RESOURCE]:
      list: [GET /resource]
      get: [GET /resource/:id]
      create: [POST /resource]
      update: [PUT /resource/:id]
      delete: [DELETE /resource/:id]
      
  error_handling:
    401: [redirect_to_login]
    403: [show_forbidden]
    404: [show_not_found]
    500: [show_error]
    
styling:
  framework: [tailwind/bootstrap/material]
  version: [4.x.x]
  
  tailwind:
    config:
      content:
        - "./src/**/*.{html,ts}"
      theme:
        extend:
          colors:
            primary: [#COLOR]
            secondary: [#COLOR]
          fonts:
            sans: [Inter, sans-serif]
    utilities:
      responsive: true
      dark_mode: [class/media]
      
  global_styles:
    - normalize.css
    - [custom.css]
    
forms:
  type: [reactive/template]
  validation:
    library: [angular-native/vuelidate/custom]
    patterns:
      email: [^[\w\.-]+@[\w\.-]+\.\w+$]
      phone: [PATTERN]
  
  common_validators:
    - required
    - email
    - minLength
    - maxLength
    - pattern
    
testing:
  unit: [jest/karma]
  e2e: [cypress/playwright]
  coverage_target: [80]
  
  config:
    test_files: ["*.spec.ts", "*.test.ts"]
    exclude: ["node_modules", "dist"]
    
build:
  output: dist/[PROJECT_NAME]
  
  optimization:
    bundle_budget: [500kb]
    lazy_loading: true
    tree_shaking: true
    minification: true
    source_maps: [false]
    
  environments:
    development:
      api_url: [http://localhost:3000]
      debug: true
    production:
      api_url: [https://api.production.com]
      debug: false
      
conventions:
  naming:
    components: [PascalCase]
    services: [PascalCase]
    files: [kebab-case]
    folders: [kebab-case]
    interfaces: [IPascalCase]
    enums: [PascalCase]
    
  git:
    branch: [feature|fix|chore]/[description]
    commit: [type(scope): message]
    
  code:
    max_line_length: [100]
    indent: [2]
    quotes: [single]
    semicolons: [true/false]
    
commands:
  dev: [ng serve / npm run dev]
  build: [ng build / npm run build]
  test: [ng test / npm test]
  lint: [ng lint / npm run lint]
  deploy: [DEPLOY_COMMAND]
  
  custom:
    [COMMAND_NAME]: [COMMAND]
    
security:
  csp: [POLICY_STRING]
  https: [enforced/optional]
  
  headers:
    X-Frame-Options: [DENY]
    X-Content-Type-Options: [nosniff]
    
  secrets:
    storage: [env/vault]
    prefix: [VITE_/NEXT_PUBLIC_]
    
patterns:
  service_structure: |
    @Injectable({ providedIn: 'root' })
    export class NameService {
      private readonly http = inject(HttpClient);
      // methods
    }
    
  component_structure: |
    @Component({
      selector: 'app-name',
      standalone: true,
      imports: [],
      template: ``
    })
    export class NameComponent {}
    
  guard_structure: |
    export const nameGuard: CanActivateFn = (route, state) => {
      // logic
      return true;
    }
  
  interface_structure: |
    export interface IName {
      id: string;
      // properties
    }
  
  enum_structure: |
    export enum NameEnum {
      VALUE1 = 'value1',
      VALUE2 = 'value2'
    }
    
  model_structure: |
    export class NameModel {
      constructor(
        public id: string,
        // properties
      ) {}
    }

imports:
  common:
    angular_core:
      - Component
      - Injectable
      - inject
      - signal
      - computed
      - effect
    angular_common:
      - CommonModule
      - AsyncPipe
      - DatePipe
    angular_forms:
      - ReactiveFormsModule
      - FormBuilder
      - FormGroup
      - Validators
    angular_router:
      - Router
      - ActivatedRoute
      - RouterLink
      - RouterOutlet
    rxjs:
      - Observable
      - Subject
      - BehaviorSubject
      - map
      - filter
      - switchMap
      - catchError
      - of
      - throwError

file_templates:
  service: [name].service.ts
  component: [name].component.ts
  interface: [name].interface.ts
  model: [name].model.ts
  guard: [name].guard.ts
  pipe: [name].pipe.ts
  directive: [name].directive.ts
  module: [name].module.ts
  spec: [name].spec.ts

error_messages:
  auth:
    invalid_credentials: "Invalid email or password"
    session_expired: "Your session has expired"
    unauthorized: "You are not authorized"
  validation:
    required: "This field is required"
    email: "Invalid email format"
    min_length: "Minimum length is {min}"
    max_length: "Maximum length is {max}"
  api:
    network_error: "Network error. Please try again"
    server_error: "Server error. Please contact support"
    not_found: "Resource not found"

optimizations:
  signals:
    enabled: [true/false]
    patterns:
      - computed_values
      - effect_cleanup
  
  change_detection:
    strategy: [OnPush/Default]
    track_by: [always/when_needed]
  
  lazy_loading:
    routes: [true/false]
    modules: [true/false]
    components: [true/false]

# LLM INSTRUCTIONS:
# - Use this YAML as source of truth for all code generation
# - All patterns must be followed exactly
# - Replace [PLACEHOLDERS] with actual values
# - When generating code, reference specific sections by path (e.g., auth.provider)
# - Use imports.common for standard imports
# - Apply error_messages consistently across the app
# - Follow file_templates naming convention
# - Priority: security > performance > features
# - When uncertain, check patterns section first
