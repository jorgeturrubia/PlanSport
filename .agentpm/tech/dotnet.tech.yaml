# .NET Technical Specification Template for LLM Code Generation
# Version: 1.0
# Purpose: LLM-only consumption for precise API/backend code generation
# Instructions: Replace all [PLACEHOLDERS] with actual values

project:
  name: [PROJECT_NAME]
  type: [WebAPI/MVC/Blazor/MAUI]
  created: [YYYY-MM-DD]
  description: [PROJECT_DESCRIPTION]
  
stack:
  dotnet:
    version: [8.x.x/9.x.x]
    target_framework: [net8.0/net9.0]
    sdk_version: [8.0.x/9.0.x]
  csharp: [11.0/12.0]
  database: [postgres/sqlserver/mysql/mongodb/cosmos]
  hosting: [IIS/Kestrel/Docker/Azure/AWS]
  
dependencies:
  packages:
    # Core Framework
    Microsoft.AspNetCore.App: [VERSION]
    
    # Database & ORM
    [DATABASE_PROVIDER_PACKAGE]: [VERSION]
    [ORM_PACKAGE]: [VERSION]
    
    # Authentication & Authorization
    [AUTH_PACKAGE]: [VERSION]
    
    # API Documentation
    [API_DOC_PACKAGE]: [VERSION]
    
    # Logging
    [LOGGING_PACKAGE]: [VERSION]
    
    # Utilities
    [MAPPING_PACKAGE]: [VERSION]
    [VALIDATION_PACKAGE]: [VERSION]
    [MEDIATOR_PACKAGE]: [VERSION]
    
    # Testing
    [TEST_FRAMEWORK]: [VERSION]
    [MOCK_FRAMEWORK]: [VERSION]
    [ASSERTION_LIBRARY]: [VERSION]
    
    # Custom packages
    [PACKAGE_NAME]: [VERSION]
    
architecture:
  pattern: [clean-architecture/n-tier/vertical-slice/hexagonal/onion]
  api_style: [REST/GraphQL/gRPC/OData]
  cqrs: [true/false]
  event_driven: [true/false]
  
  structure:
    # Define your project structure
    src:
      [LAYER_NAME]:           # e.g., API, Application, Domain, Infrastructure
        [FOLDER_NAME]:        # e.g., Controllers, Services, Models
          description: [FOLDER_PURPOSE]
      [LAYER_NAME]:
        [FOLDER_NAME]:
          description: [FOLDER_PURPOSE]
        
auth:
  type: [JWT/Cookie/OAuth/OpenID/Certificate]
  provider: [Supabase/Auth0/IdentityServer/AzureAD/Custom]
  multi_tenant: [true/false]
  
  jwt:
    issuer: [ISSUER_URL]
    audience: [AUDIENCE]
    secret_key: [SECRET_KEY_ENV_VAR]
    expiration_minutes: [NUMBER]
    refresh_expiration_days: [NUMBER]
    algorithm: [HS256/RS256]
    
  policies:
    - name: [POLICY_NAME]
      requirements: [REQUIREMENT_TYPE:VALUE]
    - name: [POLICY_NAME]
      requirements: [REQUIREMENT_TYPE:VALUE]
      
  roles:
    - [ROLE_NAME]
    - [ROLE_NAME]
    
  claims:
    - [CLAIM_TYPE]
    - [CLAIM_TYPE]
    
database:
  provider: [EntityFrameworkCore/Dapper/MongoDriver/CosmosDB]
  database_type: [PostgreSQL/SQLServer/MySQL/SQLite/MongoDB/CosmosDB]
  connection_string_key: [CONNECTION_STRING_ENV_KEY]
  multi_tenant_strategy: [single-db/db-per-tenant/schema-per-tenant/none]
  
  configuration:
    lazy_loading: [true/false]
    change_tracking: [true/false]
    query_splitting: [true/false]
    use_snake_case: [true/false]
    soft_delete: [true/false]
    audit_fields: [true/false]
    
  migrations:
    location: [MIGRATIONS_PATH]
    auto_migrate: [true/false]
    seed_on_create: [true/false]
    
  entities:
    # Define your domain entities
    [ENTITY_NAME]:
      properties:
        [PROPERTY_NAME]: [TYPE]
        [PROPERTY_NAME]: [TYPE]
      relations:
        [RELATION_NAME]: [one-to-one/one-to-many/many-to-many]
      indexes:
        - [FIELD_NAME]
      unique:
        - [FIELD_NAME]
    [ENTITY_NAME]:
      properties:
        [PROPERTY_NAME]: [TYPE]
      relations:
        [RELATION_NAME]: [RELATION_TYPE]
    
api:
  versioning:
    enabled: [true/false]
    strategy: [url/header/query/media-type]
    default_version: [1.0]
    deprecated_versions: [[]]
    
  documentation:
    provider: [Swagger/ReDoc/OpenAPI]
    enabled: [true/false]
    title: [API_TITLE]
    description: [API_DESCRIPTION]
    contact_email: [EMAIL]
    license: [MIT/Apache/Proprietary]
    
  cors:
    enabled: [true/false]
    allowed_origins:
      - [ORIGIN_URL]
      - [ORIGIN_URL]
    allowed_methods: [GET, POST, PUT, DELETE, PATCH, OPTIONS]
    allowed_headers: [LIST_OF_HEADERS]
    expose_headers: [LIST_OF_HEADERS]
    allow_credentials: [true/false]
    
  rate_limiting:
    enabled: [true/false]
    window_seconds: [NUMBER]
    permit_limit: [NUMBER]
    queue_limit: [NUMBER]
    
  pagination:
    default_page_size: [NUMBER]
    max_page_size: [NUMBER]
    page_parameter: [page/pageNumber]
    size_parameter: [size/pageSize]
    
  response_format:
    use_wrapper: [true/false]
    wrapper_structure: [DEFINE_STRUCTURE]
    
  endpoints:
    naming_convention: [kebab-case/PascalCase/camelCase]
    route_prefix: [api/v{version}]
    use_plural: [true/false]
    
    # Define main endpoints
    resources:
      [RESOURCE_NAME]:
        base_route: [/resource-name]
        operations: [GET, POST, PUT, DELETE]
        authorization: [POLICY_NAME/anonymous]
      [RESOURCE_NAME]:
        base_route: [/resource-name]
        operations: [LIST_OPERATIONS]
        authorization: [POLICY_NAME]
    
validation:
  framework: [FluentValidation/DataAnnotations/Custom]
  auto_validate: [true/false]
  
  rules:
    # Define common validation rules
    [FIELD_TYPE]:
      - [VALIDATION_RULE]
      - [VALIDATION_RULE]
    
  error_format:
    include_field: [true/false]
    include_code: [true/false]
    localized: [true/false]
    
logging:
  framework: [Serilog/NLog/log4net/Built-in]
  minimum_level: [Verbose/Debug/Information/Warning/Error/Fatal]
  
  sinks:
    - type: [Console/File/Database/Seq/ElasticSearch/ApplicationInsights]
      configuration: [SINK_CONFIG]
    
  structured:
    enabled: [true/false]
    properties:
      - [PROPERTY_NAME]
      - [PROPERTY_NAME]
    
  performance:
    log_slow_queries: [true/false]
    threshold_ms: [NUMBER]
    
caching:
  provider: [InMemory/Redis/SqlServer/NCache]
  enabled: [true/false]
  
  configuration:
    connection_string: [CACHE_CONNECTION_STRING]
    default_expiration_minutes: [NUMBER]
    sliding_expiration: [true/false]
    
  strategies:
    # Define caching strategies per resource
    [RESOURCE_NAME]:
      duration_minutes: [NUMBER]
      invalidation: [on-write/on-schedule/manual]
    
messaging:
  enabled: [true/false]
  provider: [RabbitMQ/AzureServiceBus/Kafka/Redis/InMemory]
  
  configuration:
    connection_string: [MESSAGE_BUS_CONNECTION]
    retry_count: [NUMBER]
    retry_delay_ms: [NUMBER]
    
  queues:
    - name: [QUEUE_NAME]
      durable: [true/false]
    
  topics:
    - name: [TOPIC_NAME]
      partition_count: [NUMBER]
    
testing:
  framework: [xUnit/NUnit/MSTest]
  
  structure:
    unit_tests:
      location: [UNIT_TEST_PATH]
      naming: [ClassNameTests/ClassNameShould]
    integration_tests:
      location: [INTEGRATION_TEST_PATH]
      database: [InMemory/TestContainer/Real]
    end_to_end:
      location: [E2E_TEST_PATH]
      framework: [Playwright/Selenium]
    
  coverage:
    minimum_percentage: [NUMBER]
    exclude_patterns:
      - [PATTERN]
      - [PATTERN]
    
  mocking:
    framework: [Moq/NSubstitute/FakeItEasy]
    
error_handling:
  use_global_handler: [true/false]
  use_problem_details: [true/false]
  
  exception_mapping:
    # Map exceptions to HTTP status codes
    [EXCEPTION_TYPE]: [HTTP_STATUS_CODE]
    [EXCEPTION_TYPE]: [HTTP_STATUS_CODE]
    
  error_codes:
    # Define custom error codes
    [ERROR_SCENARIO]: [ERROR_CODE]
    
  localization:
    enabled: [true/false]
    default_language: [es/en/pt]
    
performance:
  async_everywhere: [true/false]
  
  database_optimization:
    use_projection: [true/false]
    use_no_tracking: [true/false]
    batch_size: [NUMBER]
    connection_pooling:
      min: [NUMBER]
      max: [NUMBER]
    
  response_compression:
    enabled: [true/false]
    algorithms: [gzip/brotli]
    minimum_size_bytes: [NUMBER]
    
  request_buffering:
    enabled: [true/false]
    memory_buffer_limit: [NUMBER]
    
security:
  https_only: [true/false]
  
  headers:
    # Security headers to include
    [HEADER_NAME]: [HEADER_VALUE]
    
  data_protection:
    encrypt_pii: [true/false]
    encryption_algorithm: [AES256/RSA]
    key_storage: [LocalMachine/AzureKeyVault/AWS_KMS]
    
  secrets:
    provider: [UserSecrets/AzureKeyVault/AWS_SecretManager/HashiCorp_Vault]
    prefix: [SECRET_PREFIX]
    
  audit:
    enabled: [true/false]
    log_reads: [true/false]
    log_writes: [true/false]
    retention_days: [NUMBER]
    
deployment:
  containerization:
    enabled: [true/false]
    registry: [DockerHub/ACR/ECR/GCR]
    base_image: [IMAGE_NAME:TAG]
    
  orchestration:
    platform: [Kubernetes/Docker_Swarm/ECS/None]
    
  ci_cd:
    platform: [GitHub_Actions/Azure_DevOps/Jenkins/GitLab]
    
  environments:
    - name: [Development/Staging/Production]
      variables:
        [VARIABLE_NAME]: [VALUE]
    
  health_checks:
    enabled: [true/false]
    endpoint: [/health]
    include_details: [true/false]
    
conventions:
  naming:
    classes: [PascalCase]
    interfaces: [IPascalCase]
    methods: [PascalCase]
    properties: [PascalCase]
    private_fields: [_camelCase/camelCase]
    constants: [UPPER_CASE/PascalCase]
    parameters: [camelCase]
    
  files:
    # File naming patterns
    [FILE_TYPE]: [NAMING_PATTERN]
    
  folders:
    case: [PascalCase/camelCase/kebab-case]
    
  code_style:
    use_var: [always/when_obvious/never]
    use_expression_body: [always/when_simple/never]
    use_file_scoped_namespaces: [true/false]
    use_global_usings: [true/false]
    use_nullable_reference_types: [true/false]
    use_records: [for_dtos/always/never]
    use_init_only: [true/false]
    
  git:
    branch_naming: [feature|fix|chore|release]/[description]
    commit_format: [conventional/custom]
    
patterns:
  # Define code patterns for generation
  # Add your specific patterns here
  controller: [PATTERN]
  service: [PATTERN]
  repository: [PATTERN]
  entity: [PATTERN]
  dto: [PATTERN]
  validator: [PATTERN]
  
commands:
  # CLI commands for common tasks
  build: [COMMAND]
  run: [COMMAND]
  test: [COMMAND]
  publish: [COMMAND]
  migrate: [COMMAND]
  seed: [COMMAND]
  
custom_sections:
  # Add any project-specific sections here
  [SECTION_NAME]:
    [KEY]: [VALUE]
    
# LLM INSTRUCTIONS:
# - Use this YAML as source of truth for all .NET code generation
# - Replace ALL [PLACEHOLDERS] with actual values before use
# - Follow C# naming conventions as specified in conventions section
# - Implement patterns exactly as defined
# - Use async/await for all I/O operations unless specified otherwise
# - Apply validation rules consistently
# - Follow security best practices defined in security section
# - Generate tests according to testing structure
# - Use specified frameworks and versions
# - Apply error handling patterns consistently
# - Follow the architectural pattern specified
# - Respect the folder structure defined
# - When uncertain, check patterns section first